const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

// –¢–≤–æ–π –±–æ—Ç
const TOKEN = '8291779359:AAFMrCuA6GNyiHSsudpKhI7IdHEmOn8ulaI';
const ADMIN_ID = 828439309;

const app = express();
app.use(express.json());

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  }
  next();
});

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏
let bookings = [];
let clients = {};

console.log('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// API endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–ø–∏—Å–µ–π —Å —Å–∞–π—Ç–∞
app.post('/api/book', (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏');
  
  try {
    const booking = req.body;
    
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', {
      id: booking.id,
      name: booking.name,
      phone: booking.phone,
      date: booking.date,
      time: booking.time,
      service: booking.serviceName,
      price: booking.servicePrice
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!booking.id || !booking.name || !booking.phone || !booking.date || !booking.time || !booking.serviceName || !booking.servicePrice) {
      console.log('‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      return res.status(400).json({ 
        success: false,
        error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
        received: booking 
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const newBooking = {
      id: booking.id.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      name: booking.name,
      phone: booking.phone,
      date: booking.date,
      time: booking.time,
      serviceName: booking.serviceName,
      servicePrice: booking.servicePrice,
      serviceDuration: booking.serviceDuration || '60 –º–∏–Ω',
      createdAt: new Date().toISOString(),
      status: 'pending'
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –º–∞—Å—Å–∏–≤
    bookings.push(newBooking);
    
    console.log('‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', bookings.length);
    console.log('–í—Å–µ ID –∑–∞–ø–∏—Å–µ–π:', bookings.map(b => b.id));
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.sendMessage(ADMIN_ID, 
      `üìã –ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ –° –°–ê–ô–¢–ê!\n\n` +
      `üë§ –ò–º—è: ${newBooking.name}\n` +
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${newBooking.phone}\n` +
      `üìÖ –£—Å–ª—É–≥–∞: ${newBooking.serviceName}\n` +
      `üìÜ –î–∞—Ç–∞: ${newBooking.date}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${newBooking.time}\n` +
      `üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${newBooking.servicePrice} ‚ÇΩ\n\n` +
      `ID –∑–∞–ø–∏—Å–∏: ${newBooking.id}\n` +
      `–°—Å—ã–ª–∫–∞: https://t.me/NadezhdaBeauty_Bot?start=${newBooking.id}`
    ).then(() => {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    }).catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    });
    
    res.json({ 
      success: true, 
      message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 
      bookingId: newBooking.id,
      botUrl: `https://t.me/NadezhdaBeauty_Bot?start=${newBooking.id}`,
      totalBookings: bookings.length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ 
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message 
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start(?: (\d+))?/, (msg, match) => {
  const chatId = msg.chat.id;
  const bookingId = match[1];
  
  console.log(`üîî /start –æ—Ç ${chatId}, ID –∑–∞–ø–∏—Å–∏: ${bookingId}`);
  console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: ${bookings.length}`);
  console.log(`ID –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: ${bookings.map(b => b.id).join(', ')}`);
  
  if (bookingId) {
    // –ò—â–µ–º –∑–∞–ø–∏—Å—å
    const booking = bookings.find(b => b.id === bookingId.toString());
    
    if (booking) {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:', booking);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      clients[booking.id] = chatId;
      booking.chatId = chatId;
      booking.status = 'confirmed';
      booking.confirmedAt = new Date().toISOString();
      
      bot.sendMessage(chatId, 
        `‚úÖ –í–ê–®–ê –ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n` +
        `üìÖ –£—Å–ª—É–≥–∞: ${booking.serviceName}\n` +
        `üìÜ –î–∞—Ç–∞: ${booking.date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${booking.time}\n` +
        `üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.servicePrice} ‚ÇΩ\n\n` +
        `–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –≤–∏–∑–∏—Ç–∞.`
      );
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      bot.sendMessage(ADMIN_ID,
        `‚úÖ –ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ö–õ–ò–ï–ù–¢–û–ú!\n\n` +
        `üë§ –ò–º—è: ${booking.name}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.phone}\n` +
        `üìÖ –£—Å–ª—É–≥–∞: ${booking.serviceName}\n` +
        `üìÜ –î–∞—Ç–∞: ${booking.date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${booking.time}\n` +
        `üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.servicePrice} ‚ÇΩ`
      );
      
    } else {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ò—Å–∫–æ–º—ã–π ID:', bookingId);
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', bookings);
      
      bot.sendMessage(chatId, 
        `‚ùå –ó–ê–ü–ò–°–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê!\n\n` +
        `ID: ${bookingId}\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Å–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç ID.`
      );
      
      bot.sendMessage(ADMIN_ID,
        `‚ùå –ö–õ–ò–ï–ù–¢ –ù–ï –°–ú–û–ì –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ó–ê–ü–ò–°–¨!\n\n` +
        `ID: ${bookingId}\n` +
        `Chat ID: ${chatId}\n` +
        `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${bookings.length}\n` +
        `ID –∑–∞–ø–∏—Å–µ–π: ${bookings.map(b => b.id).join(', ') || '–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'}`
      );
    }
  } else {
    bot.sendMessage(chatId, 
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
      '–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞ –ù–∞–¥–µ–∂–¥—ã –ì–Ω–∞—Ç—é–∫.\n\n' +
      '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Å–∞–π—Ç–∞.\n\n' +
      '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  if (msg.text && msg.text.startsWith('/')) return;
  
  if (chatId !== ADMIN_ID) {
    const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
    bot.sendMessage(ADMIN_ID, 
      `‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (@${msg.from.username || '–Ω–µ—Ç username'}):\n\n${msg.text}`
    );
    bot.sendMessage(chatId, '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!');
  }
});

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
const cron = require('node-cron');
cron.schedule('0 10 * * *', () => {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const tomorrowStr = tomorrow.toISOString().split('T')[0];
  
  bookings.forEach(booking => {
    if (booking.date === tomorrowStr && booking.chatId) {
      bot.sendMessage(booking.chatId, 
        `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –≤ ${booking.time} —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ "${booking.serviceName}"`
      );
    }
  });
});

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
cron.schedule('0 * * * *', () => {
  const now = new Date();
  const inTwoHours = new Date(now.getTime() + 2 * 60 * 60 * 1000);
  
  bookings.forEach(booking => {
    if (!booking.chatId) return;
    
    const bookingDateTime = new Date(`${booking.date}T${booking.time}`);
    if (bookingDateTime.getTime() <= inTwoHours.getTime() && 
        bookingDateTime.getTime() > now.getTime()) {
      bot.sendMessage(booking.chatId, 
        `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ "${booking.serviceName}"`
      );
    }
  });
});

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
app.get('/', (req, res) => {
  res.json({ 
    status: '‚úÖ Bot is running', 
    bookingsCount: bookings.length,
    bookings: bookings.map(b => ({ 
      id: b.id, 
      name: b.name, 
      date: b.date, 
      time: b.time,
      status: b.status 
    }))
  });
});

app.get('/admin/bookings', (req, res) => {
  res.json({
    success: true,
    count: bookings.length,
    bookings: bookings
  });
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.delete('/admin/bookings', (req, res) => {
  const count = bookings.length;
  bookings = [];
  res.json({ 
    success: true, 
    message: `–í—Å–µ –∑–∞–ø–∏—Å–∏ (${count}) –æ—á–∏—â–µ–Ω—ã` 
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${bookings.length}`);
  console.log(`üåê API: http://localhost:${PORT}/api/book`);
  console.log(`üìã –ê–¥–º–∏–Ω–∫–∞: http://localhost:${PORT}/admin/bookings`);
});

console.log('‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
