const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const express = require('express');
const fs = require('fs');
const path = require('path');

// –¢–≤–æ–π –±–æ—Ç
const TOKEN = '8291779359:AAFMrCuA6GNyiHSsudpKhI7IdHEmOn8ulaI';
const ADMIN_ID = 828439309;

const app = express();
app.use(express.json());

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN);

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
const BOOKINGS_FILE = path.join(__dirname, 'bookings.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞
let bookings = [];
let clients = {};

function loadBookings() {
  try {
    if (fs.existsSync(BOOKINGS_FILE)) {
      const data = fs.readFileSync(BOOKINGS_FILE, 'utf8');
      bookings = JSON.parse(data);
      console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${bookings.length} –∑–∞–ø–∏—Å–µ–π`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª
function saveBookings() {
  try {
    fs.writeFileSync(BOOKINGS_FILE, JSON.stringify(bookings, null, 2));
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${bookings.length} –∑–∞–ø–∏—Å–µ–π`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', error);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadBookings();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
const setupWebhook = async () => {
  try {
    const WEBHOOK_URL = process.env.RENDER_EXTERNAL_URL || 'https://your-app-name.onrender.com';
    await bot.setWebHook(`${WEBHOOK_URL}/bot${TOKEN}`);
    console.log(`üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}/bot${TOKEN}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.message);
  }
};

// API endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–ø–∏—Å–µ–π —Å —Å–∞–π—Ç–∞
app.post('/api/book', (req, res) => {
  try {
    const booking = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!booking.id || !booking.name || !booking.phone || !booking.date || !booking.time || !booking.serviceName || !booking.servicePrice) {
      return res.status(400).json({ error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    const newBooking = {
      id: booking.id,
      name: booking.name,
      phone: booking.phone,
      date: booking.date,
      time: booking.time,
      serviceName: booking.serviceName,
      servicePrice: booking.servicePrice,
      serviceDuration: booking.serviceDuration || '60 –º–∏–Ω',
      createdAt: new Date().toISOString()
    };
    
    bookings.push(newBooking);
    saveBookings();
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.sendMessage(ADMIN_ID, 
      `üìã –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å —Å–∞–π—Ç–∞!\n\n` +
      `üë§ –ò–º—è: ${newBooking.name}\n` +
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${newBooking.phone}\n` +
      `üìÖ –£—Å–ª—É–≥–∞: ${newBooking.serviceName}\n` +
      `üìÜ –î–∞—Ç–∞: ${newBooking.date}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${newBooking.time}\n` +
      `üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${newBooking.servicePrice} ‚ÇΩ\n\n` +
      `ID –∑–∞–ø–∏—Å–∏: ${newBooking.id}`
    ).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    });
    
    console.log('‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:', newBooking);
    res.json({ success: true, message: '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞', bookingId: newBooking.id });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start(?: (\d+))?/, (msg, match) => {
  const chatId = msg.chat.id;
  const bookingId = match[1];
  
  console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç ${chatId}, bookingId: ${bookingId}`);
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', bookings.map(b => b.id));
  
  if (bookingId) {
    // –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ —Å ID –∑–∞–ø–∏—Å–∏
    const booking = bookings.find(b => b.id == bookingId);
    if (booking) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      clients[booking.id] = chatId;
      booking.chatId = chatId;
      saveBookings();
      
      bot.sendMessage(chatId, 
        `‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n` +
        `üìÖ ${booking.serviceName}\n` +
        `üìÜ –î–∞—Ç–∞: ${booking.date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${booking.time}\n` +
        `üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.servicePrice} ‚ÇΩ\n\n` +
        `–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –≤–∏–∑–∏—Ç–∞.`
      );
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      bot.sendMessage(ADMIN_ID,
        `‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º!\n\n` +
        `üë§ –ò–º—è: ${booking.name}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.phone}\n` +
        `üìÖ –£—Å–ª—É–≥–∞: ${booking.serviceName}\n` +
        `üìÜ –î–∞—Ç–∞: ${booking.date}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${booking.time}\n` +
        `üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.servicePrice} ‚ÇΩ\n\n` +
        `Chat ID –∫–ª–∏–µ–Ω—Ç–∞: ${chatId}`
      );
    } else {
      console.log('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ID:', bookingId);
      bot.sendMessage(chatId, 
        '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –µ—Å–ª–∏:\n' +
        '‚Ä¢ –ó–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥\n' +
        '‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π —Å–∏—Å—Ç–µ–º—ã\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.'
      );
    }
  } else {
    // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
    bot.sendMessage(chatId, 
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' +
      '–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞ –ù–∞–¥–µ–∂–¥—ã –ì–Ω–∞—Ç—é–∫.\n\n' +
      '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, ' +
      '–ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (msg.text && msg.text.startsWith('/')) return;
  
  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  if (chatId !== ADMIN_ID) {
    const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
    bot.sendMessage(ADMIN_ID, 
      `‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (@${msg.from.username || '–Ω–µ—Ç username'}):\n\n${msg.text}`
    );
    bot.sendMessage(chatId, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!');
  }
});

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–ø–∏—Å–∏
cron.schedule('0 10 * * *', () => {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const tomorrowStr = tomorrow.toISOString().split('T')[0];
  
  bookings.forEach(booking => {
    if (booking.date === tomorrowStr && booking.chatId) {
      bot.sendMessage(booking.chatId, 
        `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –≤ ${booking.time} —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ "${booking.serviceName}"`
      );
    }
  });
});

// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏
cron.schedule('0 * * * *', () => {
  const now = new Date();
  const inTwoHours = new Date(now.getTime() + 2 * 60 * 60 * 1000);
  
  bookings.forEach(booking => {
    if (!booking.chatId) return;
    
    const bookingDateTime = new Date(`${booking.date}T${booking.time}`);
    if (bookingDateTime.getTime() <= inTwoHours.getTime() && 
        bookingDateTime.getTime() > now.getTime()) {
      bot.sendMessage(booking.chatId, 
        `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ "${booking.serviceName}"`
      );
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
app.post(`/bot${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
app.get('/', (req, res) => {
  res.json({ 
    status: 'Bot is running', 
    bookingsCount: bookings.length,
    webhook: `https://${req.get('host')}/bot${TOKEN}`,
    api: `https://${req.get('host')}/api/book`
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/admin/bookings', (req, res) => {
  res.json(bookings);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${bookings.length}`);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  await setupWebhook();
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
